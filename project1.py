# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QvN_mInuljnvZ8k5zgd9PdDmG5W0Jd4A
"""

# Employee Salary Prediction Project

# Step 1: Upload your CSV file
from google.colab import files
uploaded = files.upload()  # Choose your CSV file

# Step 2: Get the uploaded file name automatically
import io
import pandas as pd
file_name = next(iter(uploaded))  # This gets the name of the uploaded file

# Step 3: Import required libraries
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 4: Load dataset
df = pd.read_csv(io.BytesIO(uploaded[file_name]))
print("First 5 rows of data:")
print(df.head())

# Step 5: Handle missing values
df.fillna(method='ffill', inplace=True)

# Step 6: Encode categorical columns
label_encoders = {}
for column in ['Gender', 'Education Level', 'Job Title']:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column].astype(str))
    label_encoders[column] = le

# Step 7: Define features (X) and target (y)
X = df[['Age', 'Gender', 'Education Level', 'Job Title', 'Years of Experience']]
y = df['Salary']

# Step 8: Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 9: Build and train model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 10: Make predictions
y_pred = model.predict(X_test)

# Step 11: Evaluate the model
print("\nModel Evaluation:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R² Score:", r2_score(y_test, y_pred))

# Step 12: Compare actual vs predicted
results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print("\nComparison of Actual vs Predicted Salaries:")
print(results.head())

# Step 13: Visualization - Actual vs Predicted
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.7, color='blue')
plt.xlabel("Actual Salary")
plt.ylabel("Predicted Salary")
plt.title("Actual vs Predicted Salary")
plt.grid(True)
plt.show()

# Step 14: Predict salary for a new employee
new_employee = pd.DataFrame({
    'Age': [30],
    'Gender': [label_encoders['Gender'].transform(['Male'])[0]],
    'Education Level': [label_encoders['Education Level'].transform(["Master's"])[0]],
    'Job Title': [label_encoders['Job Title'].transform(['Data Analyst'])[0]],
    'Years of Experience': [5]
})

predicted_salary = model.predict(new_employee)
print(f"\nPredicted Salary for new employee: ₹{predicted_salary[0]:.2f}")